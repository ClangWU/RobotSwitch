%% Import and Process data
ahrs_static_data = dlmread('ahrs_static.txt');
ahrs.Time    = ahrs_static_data(:, 1);
ahrs.rawacc  = ahrs_static_data(:, 2:4);
ahrs.realacc = ahrs_static_data(:, 5:7);
ahrs.pos     = ahrs_static_data(:, 8:10);
ahrs.quaternion  = ahrs_static_data(:, 11:14);

R = zeros(3,3,length(ahrs.rawacc));     % rotation matrix describing sensor relative to Earth
%ahrs = MahonyAHRS('SamplePeriod', samplePeriod, 'Kp', 1);

for i = 1:length(ahrs.rawacc)
    R(:,:,i) = quatern2rotMat(ahrs.quaternion(i,:))';    % transpose because ahrs provides Earth relative to sensor
end

linAcc = zeros(size(ahrs.rawacc));  % accelerometer in Earth frame
for i = 1:length(ahrs.rawacc)
    linAcc(i,:) = R(:,:,i) * ahrs.realacc(i,:)';
end

cutoff_freq = 42; % Hz
nyquist = 0.5 * Fs;
lowcut = cutoff_freq/nyquist;
order = 20; % Choose a filter order, this can be adjusted based on your requirements
lpFilt = designfilt('lowpassfir', 'FilterOrder', order, 'CutoffFrequency', lowcut);
%% Filter the acceleration data
% For X-direction
accX = ahrs.realacc(:,1);
accY = ahrs.realacc(:,2);
accZ = ahrs.realacc(:,3);

filtered_accX = filtfilt(lpFilt, accX);
filtered_accY = filtfilt(lpFilt, accY);
filtered_accZ = filtfilt(lpFilt, accZ);

%% FFT and plot for acceleration data
samplePeriod = ahrs.Time(2) - ahrs.Time(1); % Assuming uniform sampling
Fs = 1/samplePeriod; % Sampling frequency
L = length(ahrs.Time); % Length of signal
f = Fs*(0:(L/2))/L; % Frequency vector
filtered_acc = [filtered_accX, filtered_accY, filtered_accZ];

linVel = zeros(size(filtered_acc));

for i = 2:length(filtered_acc)
    
    linVel(i,:) = linVel(i-1,:) + filtered_acc(i,:) * samplePeriod ;
end

linPos = zeros(size(filtered_acc));

for i = 2:length(filtered_acc)
    linPos(i,:) = linPos(i-1,:) + linVel(i,:) * samplePeriod ;
    linPos_filtered()
end

% Plot
figure('NumberTitle', 'off', 'Name', 'Linear Velocity');
subplot(2,1,1);
hold on;
plot(linVel(:,1), 'r');
plot(linVel(:,2), 'g');
plot(linVel(:,3), 'b');
xlabel('sample');
ylabel('g');
title('Linear velocity');
legend('X', 'Y', 'Z');
subplot(2,1,2);
hold on;
plot(linVel_filtered(:,1), 'r');
plot(linVel_filtered(:,2), 'g');
plot(linVel_filtered(:,3), 'b');
xlabel('sample');
ylabel('g');
title('Linear velocity filtered');
legend('X', 'Y', 'Z');


% Plot
figure('NumberTitle', 'off', 'Name', 'Linear Position');
subplot(2,1,1);
hold on;
plot(linPos(:,1), 'r');
plot(linPos(:,2), 'g');
plot(linPos(:,3), 'b');
xlabel('sample');
ylabel('g');
title('Linear Position ');
legend('X', 'Y', 'Z');
subplot(2,1,2);
hold on;
plot(linPos_filtered(:,1), 'r');
plot(linPos_filtered(:,2), 'g');
plot(linPos_filtered(:,3), 'b');
xlabel('sample');
ylabel('g');
title('Linear Position filtered');
legend('X', 'Y', 'Z');

figure;

% For X-direction
Y_X = fft(filtered_accX);
P2_X = abs(Y_X/L);
P1_X = P2_X(1:L/2+1);
P1_X(2:end-1) = 2*P1_X(2:end-1);
subplot(3,1,1);
plot(f, P1_X);
title('(X-axis)')
xlabel('Hz')
ylabel('|Amplitude|')

% For Y-direction
Y_Y = fft(filtered_accY);
P2_Y = abs(Y_Y/L);
P1_Y = P2_Y(1:L/2+1);
P1_Y(2:end-1) = 2*P1_Y(2:end-1);
subplot(3,1,2);
plot(f, P1_Y);
title('(Y-axis)')
xlabel('Hz')
ylabel('|Amplitude|')

% For Z-direction
Y_Z = fft(filtered_accZ);
P2_Z = abs(Y_Z/L);
P1_Z = P2_Z(1:L/2+1);
P1_Z(2:end-1) = 2*P1_Z(2:end-1);
subplot(3,1,3);
plot(f, P1_Z);
title('(Z-axis)')
xlabel('Hz')
ylabel('|Amplitude|')

% Adjust layout
sgtitle('ÆµÆ×')


